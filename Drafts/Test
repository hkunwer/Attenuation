# %%
import os
from locale import setlocale
import pandas as pd 
import matplotlib.pyplot as plt
import numpy as np
from numpy import sin,cos,arcsin,sqrt,abs,pi,log10,exp
from scipy.fftpack import fft,ifft
from scipy.io import wavfile
from scipy.stats import gmean 
from tqdm import tqdm
from compress_pickle import dump as cpkldump # reading/writing compressed pickles
from compress_pickle import load as cpklload # reading/writing compressed pickles

#obspy
from obspy import UTCDateTime
from obspy.geodetics.base import gps2dist_azimuth
from obspy.taup import TauPyModel
model = TauPyModel(model="iasp91")

#rtergpy
from rtergpy.run import defaults, event, etime2name
from rtergpy.waveforms import getwaves, get_respinv

#attenuation
from AttenuationFunctions import processANSS, freqmaxes

# %%
import csv
import numpy as np
from scipy.fftpack import fft,ifft

Defaults = defaults()
Event = event()
Defaults.src="RASPISHAKE"
Defaults.network="AM"
Defaults.chan="EHZ"
Defaults.stationrange=[1.,10.]
Event.ecount='00'
Event.iter='RS'
# Event.newData = False   # use already downloaded data
Event.newData=False
edateold=""

# Processing and Reading information about event stored in ANSS_data.txt

processANSS() #process to remove unneccesary information
# ANSS = pd.read_csv('ANSS_processed_data.csv', sep=',', comment='#')
ANSS = pd.read_csv('ANSS_processed_data.csv')
#print(ANSS) #Just to check if processing correctly

# run everything above to test on command line
for index, EQ in ANSS.iterrows():
    network = "AM"
    chan = "EHZ"
    src = "RASPISHAKE"
    rads = [1.,10.]
    eloc = [EQ.Latitude,EQ.Longitude,EQ.Depth] 
    MagType = [EQ.Mtype]
    MagValue = [EQ.Mag]
    Magnitude = [MagType, MagValue]
    year,mo,dy = EQ.Date.split('-')
    hh,mn,sec = EQ.Time.split(':')
    etime=(UTCDateTime(int(year),int(mo),int(dy),int(hh),int(mn),float(sec)))
    
    if EQ.Date == edateold:
        Event.ecount=str(int(Event.ecount)+1).zfill(2)
    else:
        Event.ecount='00'
    edateold=EQ.Date
    Event.eventname=etime2name(etime,ecount=Event.ecount)
    Event.origin=[eloc,etime]

    print("\n\n"+Event.eventname+" ===============================")
    try:
        st, df = [], []
        st, df = getwaves(Defaults=Defaults,Event=Event)
    except:
        print("ERROR: running on "+Event.eventname+" failed!!!!\n\n")
               
inventory = get_respinv(network,eloc,etime,rads,chan,src)
#print(inventory)

# filter for instrument response and taper

taper=0.05

stp = st.copy()  # create backup
# process data
stp.detrend(type='polynomial', order=5) # pre-instrument removal
stp.taper(taper)
stp.remove_response(output="DISP")
stp.detrend(type='polynomial', order=5) # post-instrument removal
stp.taper(taper)

# process each individual frequency band in a bandpass using .filter
# frequency bands of 0.1-0.25, 0.25-0.5, 0.5-0.75, 0.75-1, 1-1.5

freqs = ([0.1,0.25],[0.25,0.5],[0.50,0.75],[0.75,1],[1,1.25])

# freq1 band = 0.1-0.25,
stp_freq1 = stp.copy()
stp_freq1.filter("bandpass",freqmin=0.10 , freqmax=0.25)

# freq2 band = 0.25-0.5,
stp_freq2 = stp.copy()
stp_freq2.filter("bandpass", freqmin=0.25, freqmax=0.50)

# freq3 band = 0.5-0.75,
stp_freq3 = stp.copy()
stp_freq3.filter("bandpass", freqmin=0.50, freqmax=0.75)

# freq4 band = 0.75-1.
stp_freq4 = stp.copy()
stp_freq4.filter("bandpass", freqmin=0.75, freqmax=1.0)

# freq5 band = 1-1.25
stp_freq5 = stp.copy()
stp_freq5.filter("bandpass", freqmin=1.0, freqmax=1.25)

#add all freq to a tuple
stp_freqs = (stp_freq1,stp_freq2,stp_freq3,stp_freq4,stp_freq5)

# Initialize an empty list to store tuples of (distance, max amplitude)
distance_max_amplitude_pairs = []

for freq_band_index, st in enumerate(stp_freqs):
    for tr in st:
        maxamps, idx_of_max_amps = freqmaxes(tr, freqs)  # Calculate max amplitudes and indices

        for network in inventory:
            for station in network:
                station_latitude = station.latitude
                station_longitude = station.longitude
                
                # Calculate distances using station coordinates from inventory and event coordinates
                event_coords = (EQ.Latitude, EQ.Longitude)
                station_coords = (station_latitude, station_longitude)
                distance = gps2dist_azimuth(*event_coords, *station_coords)
                
                # Append the tuple (distance, max amplitude) for this station and frequency band
                distance_max_amplitude_pairs.extend((freq_band_index, distance, maxamps))
    
# Create the DataFrame from the list of tuples
df = pd.DataFrame(distance_max_amplitude_pairs, columns=['Freq Band Index', 'Distance', 'Max Amplitude'])

# Plotting
plt.figure(figsize=(10, 6))

# List of colors for each frequency band
colors = ['b', 'g', 'r', 'c', 'm']

# Loop through each frequency band and its corresponding color
for freq_band_index, color in enumerate(colors):
    # Filter the DataFrame by the current frequency band index

    #freq_band_df = df[df["Freq Band Index"]==freq_band_index] #This is the problem I think. 
    
    # Scatter plot for max amplitudes against distances with the current color
    plt.scatter(df["Distance"], df["Max Amplitude"], marker='o', color=color, label=f"Freq Band {freq_band_index + 1}")

#might be able to plt.plot without all this jazz. Try on its own. 
#cmap? sequential color map. 


# Common labels, title, and legend
plt.xlabel("Distance")
plt.ylabel("Max Amplitude")
plt.title("Maximum Amplitude vs. Distance for Different Frequency Bands")
plt.legend()

plt.grid(True)
plt.show()  